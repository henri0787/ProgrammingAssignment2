##The function makeCacheMatrix saves a user defined matrix in the cache memory and to make the data return more efficient. 
##The variables are set with default value NULL for cacheSolve, while x saves the matrix in cache. Set function resets m variable
##and storage the data in variable x as a numeric vector. Get function returns the vector in cache.
##setmatrix and getmatrix creates and store a matrix from the numeric vector x. Then it creates a list to store the 4 previous functions.

makeCacheMatrix <- function(x = matrix()) {
         m <-NULL
         y <-NULL
         set <-function(y) {
             x <<-y
             m <<-NULL
          }
         get<-function() x
         setmatrix <- function(solve) m <<- solve
         getmatrix <- function() m
         list(set=set, get=get,
         setmatrix=setmatrix,
         getmatrix=getmatrix)
 }

##The function cacheSolve returns the inverse matrix of the previous matrix in the cache memory.
##It store the x matrix in variable m and then it verifies if previous data was saved and return the matrix.
##the Solve function calculates the inverse matrix of variable m and returns its value.
cacheSolve <- function(x=matrix(), ...) {
          m<-x$getmatrix()
          if(!is.null(m)) {
              message("getting cached data")
              return(m)
           }
          matrix<-x$get()
          m <-solve(matrix, ...)
          x$setmatrix(m)
          m
 }
